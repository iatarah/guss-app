buildscript {
	ext {
		springBootVersion = '2.0.2.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		//classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath('io.swagger:swagger-codegen:2.3.1')
		classpath('io.swagger:swagger-annotations:2.0.0-rc1')

	}
}


plugins {
  id "org.springframework.boot" version "2.0.2.RELEASE"
  id 'java'
  id 'eclipse-wtp'
  id "io.spring.dependency-management" version "1.0.5.RELEASE"
  id 'war'
  id "net.ltgt.apt" version "0.15"
}


group = 'org.ugguss.services'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8




repositories {
	mavenCentral()
}

configurations {
	providedRuntime
    all*.exclude module : 'spring-boot-starter-logging'// exluding Logback that prevents deployement on server
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-data-rest')
	compile('org.springframework.boot:spring-boot-starter-web'){
		exclude module: 'org.springframework.boot:spring-boot-starter-logging'
	}
    compile('org.springframework.boot:spring-boot-starter-jersey')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-logging', version: '2.0.2.RELEASE'
	compile group: 'io.swagger', name: 'swagger-codegen-maven-plugin', version: '2.3.1'
	compile group: 'javax.persistence', name: 'javax.persistence-api', version: '2.2'
	compile group: 'org.hibernate', name: 'hibernate-validator', version: '6.0.10.Final'
	compile group: 'org.hibernate', name: 'hibernate-entitymanager', version: '5.3.1.Final'
	compile group: 'org.hibernate', name: 'hibernate-core', version: '5.3.1.Final'
	compile group: 'org.springframework.boot', name: 'spring-boot-autoconfigure', version: '2.0.2.RELEASE'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.5'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.9.5'
    compile group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.13'
    compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.11'
	compile group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2', version: '2.0.3.RELEASE'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	compile group: 'org.springframework.session', name: 'spring-session', version: '1.3.3.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc', version: '2.0.3.RELEASE'
    compile 'org.mapstruct:mapstruct-jdk8:1.2.0.Final'
    compile 'joda-time:joda-time:2.9.4'
    apt('org.mapstruct:mapstruct-processor:1.2.0.Final')
	//testCompile('org.springframework.boot:spring-boot-starter-test')
}

import io.swagger.codegen.config.CodegenConfigurator
import io.swagger.codegen.DefaultGenerator

def swaggerInput = file("guss.yaml").path
def swaggerOutputDir = file('./').path
def swaggerGeneratedDir = "./src/main/java/io/"
def generatedApiControllers = fileTree('./src/main/java/org/ugguss/generated/controller/') { 
    include '**/*Controller.java'
}
task generateApi {
	group "codegen"
	description "Generate API"
    doLast {
        def config = new CodegenConfigurator()
        config.setInputSpec(swaggerInput)
        config.setOutputDir(swaggerOutputDir)
        config.setLang('spring')
        config.setAdditionalProperties([
                'invokerPackage': 'org.ugguss.generated.client',
                'modelPackage'  : 'org.ugguss.generated.model',
                'apiPackage'    : 'org.ugguss.generated.controller',
                'dateLibrary'   : 'java8',
				'library'		: 'spring-mvc'
        ])

        new DefaultGenerator().opts(config.toClientOptInput()).generate()
    }
}

clean.doFirst {
    delete swaggerGeneratedDir, generatedApiControllers
}



processResources {
	dependsOn "buildAngular"
}

/**
* Angular frontend configs
*
**/
def webappDir = "$projectDir/src/main/webapp" // directory of angular app
def swaggerClientOutputDir = "$projectDir/src/main/webapp/src/app/gen"
task buildAngular(type:Exec) {
	dependsOn "installAngular"
	dependsOn "generateClientApi"
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	
	// Add task to the standard build group
	group = BasePlugin.BUILD_GROUP
	
	// ng doesn't exist as a file in windows -> ng.cmd
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "ng.cmd", "build"
	} else {
		commandLine "ng", "build"
	}
}

task installAngular(type:Exec) {
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "npm.cmd", "install"
		commandLine "npm.cmd",  "install",  "rxjs-compat",  "--save"
	} else {
		commandLine "npm", "install"
		commandLine "npm",  "install",  "rxjs-compat",  "--save"
	}
}

task generateClientApi {
	dependsOn "installAngular"
	group "codegen"
	description "Generate API"
        def config = new CodegenConfigurator()
        config.setInputSpec(swaggerInput)
        config.setOutputDir(swaggerClientOutputDir)
        config.setLang('typescript-angular')
        config.setAdditionalProperties([
                'dateLibrary'   : 'java8',
                'npmVersion' : '6.1.0',
                'npmName' : '@guss-member/portal-api',
                'ngVersion' : '6.0.0'
        ])

        new DefaultGenerator().opts(config.toClientOptInput()).generate()
}

sourceSets {
  main {
    output.generatedSourcesDir = 'src/main/java/'
    resources {
		srcDirs = ["$webappDir/dist", "$projectDir/src/main/resources"]
	}
  }
}
